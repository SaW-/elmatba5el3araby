/*
 * Generated by Robotoworks Mechanoid
 */
package com.aliensoft.elmatba5el3araby.prefs;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
import com.robotoworks.mechanoid.Mechanoid;

public class RecipesPreferences {
	
	public static final String PREFERENCES_NAME = "RecipesPreferences";

	public interface Keys {
		String FIRST_LAUNCH_TIMESTAMP = "FIRST_LAUNCH_TIMESTAMP";
	}

	private final SharedPreferences mPreferences;

	private static RecipesPreferences sInstance;

	public static RecipesPreferences getInstance() {
		if(sInstance == null) {
			sInstance = new RecipesPreferences(Mechanoid.getApplicationContext());
		}
		
		return sInstance;
	}
	
	private RecipesPreferences(Context context) {
		mPreferences = context.getSharedPreferences(PREFERENCES_NAME, 0);
	}

	public long getFirstLaunchTimestamp() {
		return mPreferences.getLong(Keys.FIRST_LAUNCH_TIMESTAMP, 0);
	}
	
	/**
	 * Update this preference, if you need to change many preferences
	 * you should use edit() instead since calling update in succession
	 * can have a severe performance penalty
	 */
	public void updateFirstLaunchTimestamp(long value) {
		mPreferences.edit()
			.putLong(Keys.FIRST_LAUNCH_TIMESTAMP, value)
			.commit();
	}
	
	public SharedPreferences getSharedPreferences() {
		return mPreferences;
	}

	public void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener) {
		mPreferences.registerOnSharedPreferenceChangeListener(listener);
	}

	public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener) {
		mPreferences.unregisterOnSharedPreferenceChangeListener(listener);
	}

	public RecipesPreferencesEditor edit() {
		return new RecipesPreferencesEditor(mPreferences.edit());
	}

	public class RecipesPreferencesEditor {
		private SharedPreferences.Editor mEditor;

		public RecipesPreferencesEditor(SharedPreferences.Editor editor) {
			mEditor = editor;
		}

		public boolean commit() {
			return mEditor.commit();
		}

		@TargetApi(9)
		public void apply() {
			mEditor.apply();
		}

		public RecipesPreferencesEditor clear() {
			mEditor.clear();
			return this;
		}
		public RecipesPreferencesEditor putFirstLaunchTimestamp(long value) {
			mEditor.putLong(Keys.FIRST_LAUNCH_TIMESTAMP, value);
			return this;
		}
	}
}
