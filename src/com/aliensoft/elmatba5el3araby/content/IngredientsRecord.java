/*
 * Generated by Robotoworks Mechanoid
 */
package com.aliensoft.elmatba5el3araby.content;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;

import com.aliensoft.elmatba5el3araby.content.RecipesDBContract.Ingredients;
import com.aliensoft.elmatba5el3araby.content.RecipesDBContract.Ingredients.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class IngredientsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<IngredientsRecord> sFactory = new ActiveRecordFactory<IngredientsRecord>() {
		@Override
		public IngredientsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}
	};
	
	public static ActiveRecordFactory<IngredientsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<IngredientsRecord> CREATOR 
    	= new Parcelable.Creator<IngredientsRecord>() {
        public IngredientsRecord createFromParcel(Parcel in) {
            return new IngredientsRecord(in);
        }

        public IngredientsRecord[] newArray(int size) {
            return new IngredientsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Ingredients._ID,
    	Ingredients.RECIPE_ID,
    	Ingredients.INGREDIENT,
    	Ingredients.QUANTITY,
    	Ingredients.UNITS
    };
    
    public interface Indices {
    	int _ID = 0;
    	int RECIPE_ID = 1;
    	int INGREDIENT = 2;
    	int QUANTITY = 3;
    	int UNITS = 4;
    }
    
    private long mRecipeId;
    private boolean mRecipeIdDirty;
    private String mIngredient;
    private boolean mIngredientDirty;
    private long mQuantity;
    private boolean mQuantityDirty;
    private String mUnits;
    private boolean mUnitsDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRecipeId(long recipeId) {
    	mRecipeId = recipeId;
    	mRecipeIdDirty = true;
    }
    
    public long getRecipeId() {
    	return mRecipeId;
    }
    
    public void setIngredient(String ingredient) {
    	mIngredient = ingredient;
    	mIngredientDirty = true;
    }
    
    public String getIngredient() {
    	return mIngredient;
    }
    
    public void setQuantity(long quantity) {
    	mQuantity = quantity;
    	mQuantityDirty = true;
    }
    
    public long getQuantity() {
    	return mQuantity;
    }
    
    public void setUnits(String units) {
    	mUnits = units;
    	mUnitsDirty = true;
    }
    
    public String getUnits() {
    	return mUnits;
    }
    
    
    public IngredientsRecord() {
    	super(Ingredients.CONTENT_URI);
	}
	
	private IngredientsRecord(Parcel in) {
    	super(Ingredients.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRecipeId = in.readLong();
		mIngredient = in.readString();
		mQuantity = in.readLong();
		mUnits = in.readString();
		
		boolean[] dirtyFlags = new boolean[4];
		in.readBooleanArray(dirtyFlags);
		mRecipeIdDirty = dirtyFlags[0];
		mIngredientDirty = dirtyFlags[1];
		mQuantityDirty = dirtyFlags[2];
		mUnitsDirty = dirtyFlags[3];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRecipeId);
		dest.writeString(mIngredient);
		dest.writeLong(mQuantity);
		dest.writeString(mUnits);
		dest.writeBooleanArray(new boolean[] {
			mRecipeIdDirty,
			mIngredientDirty,
			mQuantityDirty,
			mUnitsDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Ingredients.newBuilder();

		if(mRecipeIdDirty) {
			builder.setRecipeId(mRecipeId);
		}
		if(mIngredientDirty) {
			builder.setIngredient(mIngredient);
		}
		if(mQuantityDirty) {
			builder.setQuantity(mQuantity);
		}
		if(mUnitsDirty) {
			builder.setUnits(mUnits);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRecipeIdDirty = dirty;
		mIngredientDirty = dirty;
		mQuantityDirty = dirty;
		mUnitsDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRecipeId(c.getLong(Indices.RECIPE_ID));
		setIngredient(c.getString(Indices.INGREDIENT));
		setQuantity(c.getLong(Indices.QUANTITY));
		setUnits(c.getString(Indices.UNITS));
	}
	
	public static IngredientsRecord fromCursor(Cursor c) {
	    IngredientsRecord item = new IngredientsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static IngredientsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(IngredientsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static IngredientsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Ingredients.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
