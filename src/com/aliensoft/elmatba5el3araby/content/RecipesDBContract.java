/*
 * Generated by Robotoworks Mechanoid
 */
package com.aliensoft.elmatba5el3araby.content;

import java.lang.reflect.Field;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import android.net.Uri;
import android.provider.BaseColumns;

import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class RecipesDBContract {
	public static final String CONTENT_AUTHORITY = initAuthority();

	private static String initAuthority() {
		String authority = "com.aliensoft.elmatba5el3araby.content.recipesdb";

		try {

			ClassLoader loader = RecipesDBContract.class.getClassLoader();

			Class<?> clz = loader
					.loadClass("com.aliensoft.elmatba5el3araby.content.RecipesDBContentProviderAuthority");
			Field declaredField = clz.getDeclaredField("CONTENT_AUTHORITY");

			authority = declaredField.get(null).toString();
		} catch (ClassNotFoundException e) {
		} catch (NoSuchFieldException e) {
		} catch (IllegalArgumentException e) {
		} catch (IllegalAccessException e) {
		}

		return authority;
	}

	private static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);

	interface IngredientsColumns {
		String RECIPE_ID = "recipe_id";
		String INGREDIENT = "ingredient";
		String QUANTITY = "quantity";
		String UNITS = "units";
	}

	interface RecipesColumns {
		String SOURCE = "source";
		String SOURCE_NAME = "source_name";
		String NAME = "name";
		String PREP_TIME = "prep_time";
		String COOK_TIME = "cook_time";
		String TOTAL_TIME = "total_time";
		String SERVES = "serves";
		String DIRECTIONS = "directions";
		String CATEGORY = "category";
		String IMAGE = "image";
		String SUMMARY = "summary";
		String FAVORITE = "favorite";
	}

	interface CategoriesColumns {
		String CATEGORY = "category";
	}

	interface SearchColumns {
		String STRING = "string";
	}

	interface SearchWithRecipeColumns {
		String NAME = "name";
		String IMAGE = "image";
		String PREP_TIME = "prep_time";
		String COOK_TIME = "cook_time";
		String CATEGORY = "category";
		String STRING = "string";
		String FAVORITE = "favorite";
		String TOTAL_TIME = "total_time";
	}

	/**
	 * <p>
	 * Column definitions and helper methods to work with the Ingredients.
	 * </p>
	 */
	public static class Ingredients implements IngredientsColumns, BaseColumns {
		public static final Uri CONTENT_URI = BASE_CONTENT_URI.buildUpon()
				.appendPath("ingredients").build();

		/**
		 * <p>
		 * The content type for a cursor that contains many Ingredients rows.
		 * </p>
		 */
		public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.recipesdb.ingredients";

		/**
		 * <p>
		 * The content type for a cursor that contains a single Ingredients row.
		 * </p>
		 */
		public static final String ITEM_CONTENT_TYPE = "vnd.android.cursor.item/vnd.recipesdb.ingredients";

		/**
		 * <p>
		 * Builds a Uri with appended id for a row in Ingredients, eg:-
		 * content://eu.masconsult.template.elmatba5el3araby.content.recipesdb/ingredients/123.
		 * </p>
		 */
		public static Uri buildUriWithId(long id) {
			return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
		}

		public static int delete() {
			return Mechanoid.getContentResolver().delete(Ingredients.CONTENT_URI, null, null);
		}

		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(Ingredients.CONTENT_URI, where,
					selectionArgs);
		}

		/**
		 * <p>
		 * Create a new Builder for Ingredients
		 * </p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}

		/**
		 * <p>
		 * Build and execute insert or update statements for Ingredients.
		 * </p>
		 *
		 * <p>
		 * Use {@link Ingredients#newBuilder()} to create new builder
		 * </p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), Ingredients.CONTENT_URI);
			}

			public Builder setRecipeId(long value) {
				mValues.put(Ingredients.RECIPE_ID, value);
				return this;
			}

			public Builder setIngredient(String value) {
				mValues.put(Ingredients.INGREDIENT, value);
				return this;
			}

			public Builder setQuantity(long value) {
				mValues.put(Ingredients.QUANTITY, value);
				return this;
			}

			public Builder setUnits(String value) {
				mValues.put(Ingredients.UNITS, value);
				return this;
			}
		}

		static final Set<Uri> VIEW_URIS;

		static {
			HashSet<Uri> viewUris = new HashSet<Uri>();

			viewUris.add(Search.CONTENT_URI);
			viewUris.add(SearchWithRecipe.CONTENT_URI);

			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}

	/**
	 * <p>
	 * Column definitions and helper methods to work with the Recipes.
	 * </p>
	 */
	public static class Recipes implements RecipesColumns, BaseColumns {
		public static final Uri CONTENT_URI = BASE_CONTENT_URI.buildUpon().appendPath("recipes")
				.build();

		/**
		 * <p>
		 * The content type for a cursor that contains many Recipes rows.
		 * </p>
		 */
		public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.recipesdb.recipes";

		/**
		 * <p>
		 * The content type for a cursor that contains a single Recipes row.
		 * </p>
		 */
		public static final String ITEM_CONTENT_TYPE = "vnd.android.cursor.item/vnd.recipesdb.recipes";

		/**
		 * <p>
		 * Builds a Uri with appended id for a row in Recipes, eg:-
		 * content://eu.masconsult.template.elmatba5el3araby.content.recipesdb/recipes/123.
		 * </p>
		 */
		public static Uri buildUriWithId(long id) {
			return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
		}

		public static int delete() {
			return Mechanoid.getContentResolver().delete(Recipes.CONTENT_URI, null, null);
		}

		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(Recipes.CONTENT_URI, where, selectionArgs);
		}

		/**
		 * <p>
		 * Create a new Builder for Recipes
		 * </p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}

		/**
		 * <p>
		 * Build and execute insert or update statements for Recipes.
		 * </p>
		 *
		 * <p>
		 * Use {@link Recipes#newBuilder()} to create new builder
		 * </p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), Recipes.CONTENT_URI);
			}

			public Builder setSource(String value) {
				mValues.put(Recipes.SOURCE, value);
				return this;
			}

			public Builder setSourceName(String value) {
				mValues.put(Recipes.SOURCE_NAME, value);
				return this;
			}

			public Builder setName(String value) {
				mValues.put(Recipes.NAME, value);
				return this;
			}

			public Builder setPrepTime(long value) {
				mValues.put(Recipes.PREP_TIME, value);
				return this;
			}

			public Builder setCookTime(long value) {
				mValues.put(Recipes.COOK_TIME, value);
				return this;
			}

			public Builder setTotalTime(long value) {
				mValues.put(Recipes.TOTAL_TIME, value);
				return this;
			}

			public Builder setServes(long value) {
				mValues.put(Recipes.SERVES, value);
				return this;
			}

			public Builder setDirections(String value) {
				mValues.put(Recipes.DIRECTIONS, value);
				return this;
			}

			public Builder setCategory(String value) {
				mValues.put(Recipes.CATEGORY, value);
				return this;
			}

			public Builder setImage(String value) {
				mValues.put(Recipes.IMAGE, value);
				return this;
			}

			public Builder setSummary(String value) {
				mValues.put(Recipes.SUMMARY, value);
				return this;
			}

			public Builder setFavorite(boolean value) {
				mValues.put(Recipes.FAVORITE, value);
				return this;
			}
		}

		static final Set<Uri> VIEW_URIS;

		static {
			HashSet<Uri> viewUris = new HashSet<Uri>();

			viewUris.add(Categories.CONTENT_URI);
			viewUris.add(Search.CONTENT_URI);
			viewUris.add(SearchWithRecipe.CONTENT_URI);

			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}

	/**
	 * <p>
	 * Column definitions and helper methods to work with the Categories.
	 * </p>
	 */
	public static class Categories implements CategoriesColumns, BaseColumns {
		public static final Uri CONTENT_URI = BASE_CONTENT_URI.buildUpon().appendPath("categories")
				.build();

		/**
		 * <p>
		 * The content type for a cursor that contains many Categories rows.
		 * </p>
		 */
		public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.recipesdb.categories";

		/**
		 * <p>
		 * The content type for a cursor that contains a single Categories row.
		 * </p>
		 */
		public static final String ITEM_CONTENT_TYPE = "vnd.android.cursor.item/vnd.recipesdb.categories";

		/**
		 * <p>
		 * Builds a Uri with appended id for a row in Categories, eg:-
		 * content://eu.masconsult.template.elmatba5el3araby.content.recipesdb/categories/123.
		 * </p>
		 */
		public static Uri buildUriWithId(long id) {
			return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
		}

		public static int delete() {
			return Mechanoid.getContentResolver().delete(Categories.CONTENT_URI, null, null);
		}

		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(Categories.CONTENT_URI, where,
					selectionArgs);
		}

		/**
		 * <p>
		 * Create a new Builder for Categories
		 * </p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}

		/**
		 * <p>
		 * Build and execute insert or update statements for Categories.
		 * </p>
		 *
		 * <p>
		 * Use {@link Categories#newBuilder()} to create new builder
		 * </p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), Categories.CONTENT_URI);
			}

			public Builder setCategory(String value) {
				mValues.put(Categories.CATEGORY, value);
				return this;
			}
		}

		static final Set<Uri> VIEW_URIS;

		static {
			HashSet<Uri> viewUris = new HashSet<Uri>();

			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}

	/**
	 * <p>
	 * Column definitions and helper methods to work with the Search.
	 * </p>
	 */
	public static class Search implements SearchColumns, BaseColumns {
		public static final Uri CONTENT_URI = BASE_CONTENT_URI.buildUpon().appendPath("search")
				.build();

		/**
		 * <p>
		 * The content type for a cursor that contains many Search rows.
		 * </p>
		 */
		public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.recipesdb.search";

		/**
		 * <p>
		 * The content type for a cursor that contains a single Search row.
		 * </p>
		 */
		public static final String ITEM_CONTENT_TYPE = "vnd.android.cursor.item/vnd.recipesdb.search";

		/**
		 * <p>
		 * Builds a Uri with appended id for a row in Search, eg:-
		 * content://eu.masconsult.template.elmatba5el3araby.content.recipesdb/search/123.
		 * </p>
		 */
		public static Uri buildUriWithId(long id) {
			return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
		}

		public static int delete() {
			return Mechanoid.getContentResolver().delete(Search.CONTENT_URI, null, null);
		}

		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(Search.CONTENT_URI, where, selectionArgs);
		}

		/**
		 * <p>
		 * Create a new Builder for Search
		 * </p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}

		/**
		 * <p>
		 * Build and execute insert or update statements for Search.
		 * </p>
		 *
		 * <p>
		 * Use {@link Search#newBuilder()} to create new builder
		 * </p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), Search.CONTENT_URI);
			}

			public Builder setString(String value) {
				mValues.put(Search.STRING, value);
				return this;
			}
		}

		static final Set<Uri> VIEW_URIS;

		static {
			HashSet<Uri> viewUris = new HashSet<Uri>();

			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}

	/**
	 * <p>
	 * Column definitions and helper methods to work with the SearchWithRecipe.
	 * </p>
	 */
	public static class SearchWithRecipe implements SearchWithRecipeColumns, BaseColumns {
		public static final Uri CONTENT_URI = BASE_CONTENT_URI.buildUpon()
				.appendPath("search_with_recipe").build();

		/**
		 * <p>
		 * The content type for a cursor that contains many SearchWithRecipe rows.
		 * </p>
		 */
		public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.recipesdb.search_with_recipe";

		/**
		 * <p>
		 * The content type for a cursor that contains a single SearchWithRecipe row.
		 * </p>
		 */
		public static final String ITEM_CONTENT_TYPE = "vnd.android.cursor.item/vnd.recipesdb.search_with_recipe";

		/**
		 * <p>
		 * Builds a Uri with appended id for a row in SearchWithRecipe, eg:-
		 * content://eu.masconsult.
		 * template.elmatba5el3araby.content.recipesdb/search_with_recipe/123.
		 * </p>
		 */
		public static Uri buildUriWithId(long id) {
			return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
		}

		public static int delete() {
			return Mechanoid.getContentResolver().delete(SearchWithRecipe.CONTENT_URI, null, null);
		}

		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(SearchWithRecipe.CONTENT_URI, where,
					selectionArgs);
		}

		/**
		 * <p>
		 * Create a new Builder for SearchWithRecipe
		 * </p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}

		/**
		 * <p>
		 * Build and execute insert or update statements for SearchWithRecipe.
		 * </p>
		 *
		 * <p>
		 * Use {@link SearchWithRecipe#newBuilder()} to create new builder
		 * </p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), SearchWithRecipe.CONTENT_URI);
			}

			public Builder setName(String value) {
				mValues.put(SearchWithRecipe.NAME, value);
				return this;
			}

			public Builder setImage(String value) {
				mValues.put(SearchWithRecipe.IMAGE, value);
				return this;
			}

			public Builder setPrepTime(long value) {
				mValues.put(SearchWithRecipe.PREP_TIME, value);
				return this;
			}

			public Builder setCookTime(long value) {
				mValues.put(SearchWithRecipe.COOK_TIME, value);
				return this;
			}

			public Builder setCategory(String value) {
				mValues.put(SearchWithRecipe.CATEGORY, value);
				return this;
			}

			public Builder setString(String value) {
				mValues.put(SearchWithRecipe.STRING, value);
				return this;
			}

			public Builder setFavorite(boolean value) {
				mValues.put(SearchWithRecipe.FAVORITE, value);
				return this;
			}

			public Builder setTotalTime(long value) {
				mValues.put(SearchWithRecipe.TOTAL_TIME, value);
				return this;
			}
		}

		static final Set<Uri> VIEW_URIS;

		static {
			HashSet<Uri> viewUris = new HashSet<Uri>();

			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}

	static Map<Uri, Set<Uri>> REFERENCING_VIEWS;

	static {
		Map<Uri, Set<Uri>> map = new HashMap<Uri, Set<Uri>>();

		map.put(Ingredients.CONTENT_URI, Ingredients.VIEW_URIS);
		map.put(Recipes.CONTENT_URI, Recipes.VIEW_URIS);
		map.put(Categories.CONTENT_URI, Categories.VIEW_URIS);
		map.put(Search.CONTENT_URI, Search.VIEW_URIS);
		map.put(SearchWithRecipe.CONTENT_URI, SearchWithRecipe.VIEW_URIS);

		REFERENCING_VIEWS = Collections.unmodifiableMap(map);

	}

	private RecipesDBContract() {
	}

	/**
	 * <p>
	 * Delete all rows from all tables
	 * </p>
	 */
	public static void deleteAll() {
		Ingredients.delete();
		Recipes.delete();
	}
}
