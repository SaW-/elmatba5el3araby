/*
 * Generated by Robotoworks Mechanoid
 */
package com.aliensoft.elmatba5el3araby.content;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;

import com.aliensoft.elmatba5el3araby.content.RecipesDBContract.Recipes;
import com.aliensoft.elmatba5el3araby.content.RecipesDBContract.Recipes.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class RecipesRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<RecipesRecord> sFactory = new ActiveRecordFactory<RecipesRecord>() {
		@Override
		public RecipesRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}
	};
	
	public static ActiveRecordFactory<RecipesRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<RecipesRecord> CREATOR 
    	= new Parcelable.Creator<RecipesRecord>() {
        public RecipesRecord createFromParcel(Parcel in) {
            return new RecipesRecord(in);
        }

        public RecipesRecord[] newArray(int size) {
            return new RecipesRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Recipes._ID,
    	Recipes.SOURCE,
    	Recipes.SOURCE_NAME,
    	Recipes.NAME,
    	Recipes.PREP_TIME,
    	Recipes.COOK_TIME,
    	Recipes.TOTAL_TIME,
    	Recipes.SERVES,
    	Recipes.DIRECTIONS,
    	Recipes.CATEGORY,
    	Recipes.IMAGE,
    	Recipes.SUMMARY,
    	Recipes.FAVORITE
    };
    
    public interface Indices {
    	int _ID = 0;
    	int SOURCE = 1;
    	int SOURCE_NAME = 2;
    	int NAME = 3;
    	int PREP_TIME = 4;
    	int COOK_TIME = 5;
    	int TOTAL_TIME = 6;
    	int SERVES = 7;
    	int DIRECTIONS = 8;
    	int CATEGORY = 9;
    	int IMAGE = 10;
    	int SUMMARY = 11;
    	int FAVORITE = 12;
    }
    
    private String mSource;
    private boolean mSourceDirty;
    private String mSourceName;
    private boolean mSourceNameDirty;
    private String mName;
    private boolean mNameDirty;
    private long mPrepTime;
    private boolean mPrepTimeDirty;
    private long mCookTime;
    private boolean mCookTimeDirty;
    private long mTotalTime;
    private boolean mTotalTimeDirty;
    private long mServes;
    private boolean mServesDirty;
    private String mDirections;
    private boolean mDirectionsDirty;
    private String mCategory;
    private boolean mCategoryDirty;
    private String mImage;
    private boolean mImageDirty;
    private String mSummary;
    private boolean mSummaryDirty;
    private boolean mFavorite;
    private boolean mFavoriteDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setSource(String source) {
    	mSource = source;
    	mSourceDirty = true;
    }
    
    public String getSource() {
    	return mSource;
    }
    
    public void setSourceName(String sourceName) {
    	mSourceName = sourceName;
    	mSourceNameDirty = true;
    }
    
    public String getSourceName() {
    	return mSourceName;
    }
    
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    
    public void setPrepTime(long prepTime) {
    	mPrepTime = prepTime;
    	mPrepTimeDirty = true;
    }
    
    public long getPrepTime() {
    	return mPrepTime;
    }
    
    public void setCookTime(long cookTime) {
    	mCookTime = cookTime;
    	mCookTimeDirty = true;
    }
    
    public long getCookTime() {
    	return mCookTime;
    }
    
    public void setTotalTime(long totalTime) {
    	mTotalTime = totalTime;
    	mTotalTimeDirty = true;
    }
    
    public long getTotalTime() {
    	return mTotalTime;
    }
    
    public void setServes(long serves) {
    	mServes = serves;
    	mServesDirty = true;
    }
    
    public long getServes() {
    	return mServes;
    }
    
    public void setDirections(String directions) {
    	mDirections = directions;
    	mDirectionsDirty = true;
    }
    
    public String getDirections() {
    	return mDirections;
    }
    
    public void setCategory(String category) {
    	mCategory = category;
    	mCategoryDirty = true;
    }
    
    public String getCategory() {
    	return mCategory;
    }
    
    public void setImage(String image) {
    	mImage = image;
    	mImageDirty = true;
    }
    
    public String getImage() {
    	return mImage;
    }
    
    public void setSummary(String summary) {
    	mSummary = summary;
    	mSummaryDirty = true;
    }
    
    public String getSummary() {
    	return mSummary;
    }
    
    public void setFavorite(boolean favorite) {
    	mFavorite = favorite;
    	mFavoriteDirty = true;
    }
    
    public boolean getFavorite() {
    	return mFavorite;
    }
    
    
    public RecipesRecord() {
    	super(Recipes.CONTENT_URI);
	}
	
	private RecipesRecord(Parcel in) {
    	super(Recipes.CONTENT_URI);
    	
		setId(in.readLong());
		
		mSource = in.readString();
		mSourceName = in.readString();
		mName = in.readString();
		mPrepTime = in.readLong();
		mCookTime = in.readLong();
		mTotalTime = in.readLong();
		mServes = in.readLong();
		mDirections = in.readString();
		mCategory = in.readString();
		mImage = in.readString();
		mSummary = in.readString();
		mFavorite = (in.readInt() > 0);
		
		boolean[] dirtyFlags = new boolean[12];
		in.readBooleanArray(dirtyFlags);
		mSourceDirty = dirtyFlags[0];
		mSourceNameDirty = dirtyFlags[1];
		mNameDirty = dirtyFlags[2];
		mPrepTimeDirty = dirtyFlags[3];
		mCookTimeDirty = dirtyFlags[4];
		mTotalTimeDirty = dirtyFlags[5];
		mServesDirty = dirtyFlags[6];
		mDirectionsDirty = dirtyFlags[7];
		mCategoryDirty = dirtyFlags[8];
		mImageDirty = dirtyFlags[9];
		mSummaryDirty = dirtyFlags[10];
		mFavoriteDirty = dirtyFlags[11];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeString(mSource);
		dest.writeString(mSourceName);
		dest.writeString(mName);
		dest.writeLong(mPrepTime);
		dest.writeLong(mCookTime);
		dest.writeLong(mTotalTime);
		dest.writeLong(mServes);
		dest.writeString(mDirections);
		dest.writeString(mCategory);
		dest.writeString(mImage);
		dest.writeString(mSummary);
		dest.writeInt(mFavorite ? 1 : 0);
		dest.writeBooleanArray(new boolean[] {
			mSourceDirty,
			mSourceNameDirty,
			mNameDirty,
			mPrepTimeDirty,
			mCookTimeDirty,
			mTotalTimeDirty,
			mServesDirty,
			mDirectionsDirty,
			mCategoryDirty,
			mImageDirty,
			mSummaryDirty,
			mFavoriteDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Recipes.newBuilder();

		if(mSourceDirty) {
			builder.setSource(mSource);
		}
		if(mSourceNameDirty) {
			builder.setSourceName(mSourceName);
		}
		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mPrepTimeDirty) {
			builder.setPrepTime(mPrepTime);
		}
		if(mCookTimeDirty) {
			builder.setCookTime(mCookTime);
		}
		if(mTotalTimeDirty) {
			builder.setTotalTime(mTotalTime);
		}
		if(mServesDirty) {
			builder.setServes(mServes);
		}
		if(mDirectionsDirty) {
			builder.setDirections(mDirections);
		}
		if(mCategoryDirty) {
			builder.setCategory(mCategory);
		}
		if(mImageDirty) {
			builder.setImage(mImage);
		}
		if(mSummaryDirty) {
			builder.setSummary(mSummary);
		}
		if(mFavoriteDirty) {
			builder.setFavorite(mFavorite);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mSourceDirty = dirty;
		mSourceNameDirty = dirty;
		mNameDirty = dirty;
		mPrepTimeDirty = dirty;
		mCookTimeDirty = dirty;
		mTotalTimeDirty = dirty;
		mServesDirty = dirty;
		mDirectionsDirty = dirty;
		mCategoryDirty = dirty;
		mImageDirty = dirty;
		mSummaryDirty = dirty;
		mFavoriteDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setSource(c.getString(Indices.SOURCE));
		setSourceName(c.getString(Indices.SOURCE_NAME));
		setName(c.getString(Indices.NAME));
		setPrepTime(c.getLong(Indices.PREP_TIME));
		setCookTime(c.getLong(Indices.COOK_TIME));
		setTotalTime(c.getLong(Indices.TOTAL_TIME));
		setServes(c.getLong(Indices.SERVES));
		setDirections(c.getString(Indices.DIRECTIONS));
		setCategory(c.getString(Indices.CATEGORY));
		setImage(c.getString(Indices.IMAGE));
		setSummary(c.getString(Indices.SUMMARY));
		setFavorite(c.getInt(Indices.FAVORITE) > 0);
	}
	
	public static RecipesRecord fromCursor(Cursor c) {
	    RecipesRecord item = new RecipesRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static RecipesRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(RecipesRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static RecipesRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Recipes.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
