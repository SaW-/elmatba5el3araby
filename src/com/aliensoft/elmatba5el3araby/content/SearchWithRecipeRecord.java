/*
 * Generated by Robotoworks Mechanoid
 */
package com.aliensoft.elmatba5el3araby.content;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;

import com.aliensoft.elmatba5el3araby.content.RecipesDBContract.SearchWithRecipe;
import com.aliensoft.elmatba5el3araby.content.RecipesDBContract.SearchWithRecipe.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class SearchWithRecipeRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<SearchWithRecipeRecord> sFactory = new ActiveRecordFactory<SearchWithRecipeRecord>() {
		@Override
		public SearchWithRecipeRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}
	};
	
	public static ActiveRecordFactory<SearchWithRecipeRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<SearchWithRecipeRecord> CREATOR 
    	= new Parcelable.Creator<SearchWithRecipeRecord>() {
        public SearchWithRecipeRecord createFromParcel(Parcel in) {
            return new SearchWithRecipeRecord(in);
        }

        public SearchWithRecipeRecord[] newArray(int size) {
            return new SearchWithRecipeRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	SearchWithRecipe._ID,
    	SearchWithRecipe.NAME,
    	SearchWithRecipe.IMAGE,
    	SearchWithRecipe.PREP_TIME,
    	SearchWithRecipe.COOK_TIME,
    	SearchWithRecipe.CATEGORY,
    	SearchWithRecipe.STRING,
    	SearchWithRecipe.FAVORITE,
    	SearchWithRecipe.TOTAL_TIME
    };
    
    public interface Indices {
    	int _ID = 0;
    	int NAME = 1;
    	int IMAGE = 2;
    	int PREP_TIME = 3;
    	int COOK_TIME = 4;
    	int CATEGORY = 5;
    	int STRING = 6;
    	int FAVORITE = 7;
    	int TOTAL_TIME = 8;
    }
    
    private String mName;
    private boolean mNameDirty;
    private String mImage;
    private boolean mImageDirty;
    private long mPrepTime;
    private boolean mPrepTimeDirty;
    private long mCookTime;
    private boolean mCookTimeDirty;
    private String mCategory;
    private boolean mCategoryDirty;
    private String mString;
    private boolean mStringDirty;
    private boolean mFavorite;
    private boolean mFavoriteDirty;
    private long mTotalTime;
    private boolean mTotalTimeDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    public void setImage(String image) {
    	mImage = image;
    	mImageDirty = true;
    }
    
    public String getImage() {
    	return mImage;
    }
    public void setPrepTime(long prepTime) {
    	mPrepTime = prepTime;
    	mPrepTimeDirty = true;
    }
    
    public long getPrepTime() {
    	return mPrepTime;
    }
    public void setCookTime(long cookTime) {
    	mCookTime = cookTime;
    	mCookTimeDirty = true;
    }
    
    public long getCookTime() {
    	return mCookTime;
    }
    public void setCategory(String category) {
    	mCategory = category;
    	mCategoryDirty = true;
    }
    
    public String getCategory() {
    	return mCategory;
    }
    public void setString(String string) {
    	mString = string;
    	mStringDirty = true;
    }
    
    public String getString() {
    	return mString;
    }
    public void setFavorite(boolean favorite) {
    	mFavorite = favorite;
    	mFavoriteDirty = true;
    }
    
    public boolean getFavorite() {
    	return mFavorite;
    }
    public void setTotalTime(long totalTime) {
    	mTotalTime = totalTime;
    	mTotalTimeDirty = true;
    }
    
    public long getTotalTime() {
    	return mTotalTime;
    }
    
    public SearchWithRecipeRecord() {
    	super(SearchWithRecipe.CONTENT_URI);
	}
	
	private SearchWithRecipeRecord(Parcel in) {
    	super(SearchWithRecipe.CONTENT_URI);
    	
		setId(in.readLong());
		
		mName = in.readString();
		mImage = in.readString();
		mPrepTime = in.readLong();
		mCookTime = in.readLong();
		mCategory = in.readString();
		mString = in.readString();
		mFavorite = (in.readInt() > 0);
		mTotalTime = in.readLong();
		
		boolean[] dirtyFlags = new boolean[8];
		in.readBooleanArray(dirtyFlags);
		mNameDirty = dirtyFlags[0];
		mImageDirty = dirtyFlags[1];
		mPrepTimeDirty = dirtyFlags[2];
		mCookTimeDirty = dirtyFlags[3];
		mCategoryDirty = dirtyFlags[4];
		mStringDirty = dirtyFlags[5];
		mFavoriteDirty = dirtyFlags[6];
		mTotalTimeDirty = dirtyFlags[7];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeString(mName);
		dest.writeString(mImage);
		dest.writeLong(mPrepTime);
		dest.writeLong(mCookTime);
		dest.writeString(mCategory);
		dest.writeString(mString);
		dest.writeInt(mFavorite ? 1 : 0);
		dest.writeLong(mTotalTime);
		dest.writeBooleanArray(new boolean[] {
			mNameDirty,
			mImageDirty,
			mPrepTimeDirty,
			mCookTimeDirty,
			mCategoryDirty,
			mStringDirty,
			mFavoriteDirty,
			mTotalTimeDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = SearchWithRecipe.newBuilder();

		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mImageDirty) {
			builder.setImage(mImage);
		}
		if(mPrepTimeDirty) {
			builder.setPrepTime(mPrepTime);
		}
		if(mCookTimeDirty) {
			builder.setCookTime(mCookTime);
		}
		if(mCategoryDirty) {
			builder.setCategory(mCategory);
		}
		if(mStringDirty) {
			builder.setString(mString);
		}
		if(mFavoriteDirty) {
			builder.setFavorite(mFavorite);
		}
		if(mTotalTimeDirty) {
			builder.setTotalTime(mTotalTime);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mNameDirty = dirty;
		mImageDirty = dirty;
		mPrepTimeDirty = dirty;
		mCookTimeDirty = dirty;
		mCategoryDirty = dirty;
		mStringDirty = dirty;
		mFavoriteDirty = dirty;
		mTotalTimeDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setName(c.getString(Indices.NAME));
		setImage(c.getString(Indices.IMAGE));
		setPrepTime(c.getLong(Indices.PREP_TIME));
		setCookTime(c.getLong(Indices.COOK_TIME));
		setCategory(c.getString(Indices.CATEGORY));
		setString(c.getString(Indices.STRING));
		setFavorite(c.getInt(Indices.FAVORITE) > 0);
		setTotalTime(c.getLong(Indices.TOTAL_TIME));
	}
	
	public static SearchWithRecipeRecord fromCursor(Cursor c) {
	    SearchWithRecipeRecord item = new SearchWithRecipeRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static SearchWithRecipeRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(SearchWithRecipeRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static SearchWithRecipeRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(SearchWithRecipe.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
